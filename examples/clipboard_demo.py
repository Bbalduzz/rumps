#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Clipboard Demo for TextFieldMenuItem

This example specifically demonstrates clipboard operations (copy/paste/cut)
in the TextFieldMenuItem widget, including:
- Basic text field with full clipboard support
- Secure text field with limited clipboard operations
- Multi-field interactions
- Keyboard shortcuts documentation
"""

import rumps


class ClipboardDemoApp(rumps.App):
    def __init__(self):
        super(ClipboardDemoApp, self).__init__(
            "Clipboard Demo",
            title="ðŸ“‹",  # Clipboard emoji
            template=True
        )

        self.build_menu()

    def build_menu(self):
        """Build the menu demonstrating clipboard functionality."""

        # Text field with full clipboard support
        text_field = rumps.TextFieldMenuItem(
            text="Type here and try Cmd+C/V/X",
            placeholder="Try clipboard operations...",
            callback=self.on_text_change,
            dimensions=(250, 22)
        )

        # Secure field with limited clipboard support
        secure_field = rumps.TextFieldMenuItem(
            text="",
            placeholder="Password (paste only)",
            callback=self.on_secure_change,
            dimensions=(200, 22),
            secure=True
        )

        # Second text field for testing copy/paste between fields
        target_field = rumps.TextFieldMenuItem(
            text="",
            placeholder="Paste content here...",
            callback=self.on_target_change,
            dimensions=(250, 22)
        )

        # Instructions menu
        instructions = rumps.MenuItem("Keyboard Shortcuts")
        instructions.add(rumps.MenuItem("âŒ˜C or Ctrl+C: Copy text"))
        instructions.add(rumps.MenuItem("âŒ˜V or Ctrl+V: Paste text"))
        instructions.add(rumps.MenuItem("âŒ˜X or Ctrl+X: Cut text"))
        instructions.add(rumps.MenuItem("âŒ˜Z or Ctrl+Z: Undo"))
        instructions.add(rumps.MenuItem("âŒ˜A or Ctrl+A: Select all"))

        # Demo actions
        actions = rumps.MenuItem("Demo Actions")
        actions.add(rumps.MenuItem("Copy System Info", callback=self.copy_system_info))
        actions.add(rumps.MenuItem("Show Clipboard Content", callback=self.show_clipboard))
        actions.add(rumps.MenuItem("Fill Sample Text", callback=self.fill_sample))

        # Build main menu
        self.menu = [
            rumps.MenuItem("Text Field (Full Clipboard):"),
            text_field,
            rumps.separator,
            rumps.MenuItem("Secure Field (Paste Only):"),
            secure_field,
            rumps.separator,
            rumps.MenuItem("Target Field:"),
            target_field,
            rumps.separator,
            instructions,
            rumps.separator,
            actions,
            rumps.separator,
            rumps.MenuItem("About", callback=self.show_about)
        ]

    def on_text_change(self, sender):
        """Handle text changes in the main text field."""
        text = sender.text
        print(f"Text field changed: '{text}'")

        if text:
            rumps.notification(
                title="Text Field",
                subtitle="Content Updated",
                message=f"Current text: {text[:50]}{'...' if len(text) > 50 else ''}",
                data=None
            )

    def on_secure_change(self, sender):
        """Handle text changes in the secure field."""
        length = len(sender.text)
        print(f"Secure field changed (length: {length})")

        if length > 0:
            rumps.notification(
                title="Secure Field",
                subtitle="Password Updated",
                message=f"Password length: {length} characters",
                data=None
            )

    def on_target_change(self, sender):
        """Handle text changes in the target field."""
        text = sender.text
        print(f"Target field changed: '{text}'")

        if text:
            rumps.notification(
                title="Target Field",
                subtitle="Content Received",
                message=f"Pasted: {text[:30]}{'...' if len(text) > 30 else ''}",
                data=None
            )

    def copy_system_info(self, sender):
        """Copy system information to clipboard for testing."""
        import platform
        import datetime

        info = f"""System Information (Generated {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')})
Platform: {platform.platform()}
Python: {platform.python_version()}
Architecture: {platform.architecture()[0]}
Processor: {platform.processor()}

This text was generated by the Clipboard Demo app.
You can now paste this into any text field using Cmd+V or Ctrl+V."""

        # Copy to clipboard using NSPasteboard
        from AppKit import NSPasteboard, NSStringPboardType
        pasteboard = NSPasteboard.generalPasteboard()
        pasteboard.clearContents()
        pasteboard.setString_forType_(info, NSStringPboardType)

        rumps.notification(
            title="Clipboard",
            subtitle="System Info Copied",
            message="System information copied to clipboard. Try pasting it!",
            data=None
        )

    def show_clipboard(self, sender):
        """Show current clipboard content."""
        from AppKit import NSPasteboard, NSStringPboardType

        pasteboard = NSPasteboard.generalPasteboard()
        clipboard_text = pasteboard.stringForType_(NSStringPboardType)

        if clipboard_text:
            # Truncate long clipboard content
            display_text = clipboard_text
            if len(display_text) > 200:
                display_text = display_text[:200] + "..."

            rumps.alert(
                title="Clipboard Content",
                message=f"Current clipboard contains:\n\n{display_text}",
                ok="OK"
            )
        else:
            rumps.alert(
                title="Clipboard Content",
                message="Clipboard is empty or contains non-text data.",
                ok="OK"
            )

    def fill_sample(self, sender):
        """Fill the main text field with sample text."""
        sample_text = "This is sample text for testing clipboard operations. Try selecting all (Cmd+A), copying (Cmd+C), and pasting (Cmd+V) into other fields!"

        # Note: In a real implementation, you would need a reference to the text field
        # For this demo, we'll just show a notification
        rumps.notification(
            title="Sample Text",
            subtitle="Copy this text manually",
            message=sample_text,
            data=None
        )

        print(f"Sample text: {sample_text}")

    def show_about(self, sender):
        about_text = """Clipboard Demo for TextFieldMenuItem

This demo showcases the clipboard functionality in rumps TextFieldMenuItem:

ðŸ”¸ SUPPORTED OPERATIONS:
â€¢ Copy (âŒ˜C / Ctrl+C): Copy selected text
â€¢ Paste (âŒ˜V / Ctrl+V): Paste from clipboard
â€¢ Cut (âŒ˜X / Ctrl+X): Cut selected text
â€¢ Undo (âŒ˜Z / Ctrl+Z): Undo last action
â€¢ Select All (âŒ˜A / Ctrl+A): Select all text

ðŸ”¸ SECURITY FEATURES:
â€¢ Secure fields disable copy operations for passwords
â€¢ Normal fields support all clipboard operations
â€¢ Cross-platform keyboard shortcut support

ðŸ”¸ HOW TO TEST:
1. Type text in the main field
2. Select text and copy it (âŒ˜C)
3. Paste it in another field (âŒ˜V)
4. Try the demo actions for more examples

The TextFieldMenuItem provides seamless integration with
the system clipboard while maintaining security for
sensitive input fields."""

        rumps.alert(
            title="About Clipboard Demo",
            message=about_text,
            ok="Got it!"
        )


if __name__ == "__main__":
    print("Clipboard Demo starting...")
    print("This demo shows clipboard support in TextFieldMenuItem.")
    print("Look for the ðŸ“‹ icon in your menu bar.")
    print()
    print("Supported keyboard shortcuts:")
    print("â€¢ âŒ˜C / Ctrl+C: Copy")
    print("â€¢ âŒ˜V / Ctrl+V: Paste")
    print("â€¢ âŒ˜X / Ctrl+X: Cut")
    print("â€¢ âŒ˜Z / Ctrl+Z: Undo")
    print("â€¢ âŒ˜A / Ctrl+A: Select All")
    print()
    print("Test by typing in the text fields and using these shortcuts!")

    app = ClipboardDemoApp()
    app.run(debug=True)